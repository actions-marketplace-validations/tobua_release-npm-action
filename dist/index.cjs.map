{
  "version": 3,
  "sources": ["../index.js", "../package.js", "../release.js", "../version.js", "../publish.js"],
  "sourcesContent": ["import { getInput, info, debug, setFailed } from '@actions/core'\nimport { execSync } from 'child_process'\nimport { getPackage } from './package.js'\nimport { getRelease, createRelease } from './release.js'\nimport { getVersion } from './version.js'\nimport { publish } from './publish.js'\n\n// Top-level await not yet supported out of the box with default eslint-parser.\nconst run = async () => {\n  try {\n    const token = getInput('NPM_TOKEN')\n\n    if (!token) {\n      return setFailed('Missing NPM_TOKEN action secret.')\n    }\n\n    debug(`release-npm-action with node: ${execSync('node -v').toString()}`)\n\n    const debugMode = token === 'debug'\n\n    if (debugMode) {\n      info('Running in debug mode...')\n    }\n\n    const { release, major } = getRelease(debugMode)\n\n    if (!release) {\n      return info('No release requested.')\n    }\n\n    info(`${major ? 'Major' : 'Regular'} release requested.`)\n\n    const { name, scripts, error } = getPackage()\n\n    if (error && !debugMode) {\n      return setFailed(error)\n    }\n\n    const { first, version } = await getVersion(name)\n\n    info(`Publishing ${name} ${first ? 'as first release' : `as ${version}`}.`)\n\n    await createRelease(version, first, major)\n\n    publish(debugMode)\n  } catch (error) {\n    setFailed(error.message)\n  }\n}\n\nrun()\n", "import { existsSync, readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\nimport { info } from '@actions/core'\n\nexport const getPackageJsonPath = () => join(process.cwd(), 'package.json')\n\nexport const getPackage = () => {\n  const packageJsonPath = getPackageJsonPath()\n  info(packageJsonPath)\n  const packageJsonFound = existsSync(packageJsonPath)\n  info(packageJsonFound)\n\n  if (!packageJsonFound) {\n    return { error: 'package.json not found.' }\n  }\n\n  const contents = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n  if (!contents.name) {\n    return { error: 'package.json is missing \"name\" property.' }\n  }\n\n  return {\n    name: contents.name,\n    scripts: contents.scripts,\n  }\n}\n\nexport const addPackageProperties = (newProperties) => {\n  const packageJsonPath = getPackageJsonPath()\n  const existingContents = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n\n  const newContents = { ...existingContents, ...newProperties }\n\n  writeFileSync(packageJsonPath, JSON.stringify(newContents))\n}\n", "import { execSync } from 'child_process'\nimport { info, debug, getInput } from '@actions/core'\nimport { context, getOctokit } from '@actions/github'\nimport standardVersion from 'standard-version'\nimport { addPackageProperties } from './package.js'\n\nexport const getRelease = (debugMode) => {\n  // Get body of latest commit.\n  const commitMessage = execSync('git log -1 --pretty=%B').toString()\n  info(`commitMessage ${commitMessage}`)\n  const release = commitMessage.includes('release-npm')\n  const major = commitMessage.includes('release-npm major')\n\n  return {\n    release: debugMode || release, // TODO true for debugging purposes.\n    major,\n  }\n}\n\nexport const createRelease = async (version, first, major) => {\n  const debugMode = !getInput('NPM_TOKEN') || getInput('NPM_TOKEN') === 'debug'\n\n  if (first && !version) {\n    version = '0.0.0'\n  }\n\n  // Add version to be picked up by standard-version.\n  addPackageProperties({ version })\n\n  await standardVersion({\n    dryRun: debugMode,\n    skip: {\n      // Don't create a commit, as version not persisted and changelog in github releases.\n      commit: true,\n    },\n    firstRelease: first,\n    releaseAs: major ? 'major' : undefined,\n  })\n\n  execSync('git push --follow-tags')\n\n  let tagName = `v${version}`\n\n  if (!debugMode) {\n    tagName = execSync('git describe HEAD --abbrev=0')\n\n    info(`Pushed release tag ${tagName}.`)\n  }\n\n  debug(`version: ${version} tagName: ${tagName}`)\n\n  if (getInput('GITHUB_TOKEN')) {\n    debug('has github input')\n  }\n\n  if (process.env.GITHUB_TOKEN) {\n    debug('has github token')\n  }\n\n  if (debugMode) {\n    return\n  }\n\n  const github = new getOctokit(process.env.GITHUB_TOKEN)\n\n  const createReleaseResponse = await github.repos.createRelease({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    tag_name: tagName,\n    name: tagName,\n    // TODO Read body from CHANGELOG.md created when not in dry run mode.\n    body: 'body',\n  })\n\n  const {\n    data: { id: releaseId, html_url: htmlUrl, upload_url: uploadUrl },\n  } = createReleaseResponse\n\n  info(`Release created ${releaseId} url: ${htmlUrl} upload: ${uploadUrl}.`)\n}\n", "import fetch from 'node-fetch'\nimport { info } from '@actions/core'\n\nexport const getVersion = async (name) => {\n  info(`version for ${name}`)\n\n  let first = true\n  let version\n\n  try {\n    const response = await fetch(`https://registry.npmjs.org/${name}/latest`)\n    const body = await response.json()\n    first = body === 'Not Found' || typeof body !== 'object' || !body.version\n    version = body.version\n  } catch (error) {\n    first = true\n  }\n\n  info(`version ${version} first ${first}`)\n\n  return {\n    first,\n    version,\n  }\n}\n", "import { execSync } from 'child_process'\nimport { getInput, setFailed } from '@actions/core'\n\nexport const publish = (dry) => {\n  let command = 'npm publish'\n\n  if (dry) {\n    command += ' --dry-run'\n  }\n\n  const env = {\n    cwd: process.cwd(),\n    env: {\n      ...process.env,\n      NODE_AUTH_TOKEN: getInput('NPM_TOKEN'),\n    },\n  }\n\n  try {\n    execSync(command, env)\n  } catch (error) {\n    setFailed('Failed to publish to npm.')\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
